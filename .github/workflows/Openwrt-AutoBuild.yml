name: Openwrt-AutoBuild

on:
#  release:
#    types: [published]
  push:
    branches:
      - master
    paths:
      - 'start'
  schedule:
    - cron: 0 20 */7 * *
  watch:
    types: [started]

env:
  RUN_VALIDATION: true

jobs:
  build:
    runs-on:  ubuntu-18.04
    if: github.event.repository.owner.id == github.event.sender.id

    name: Build ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [lean-ipq40xx] #lean-x64,lean-ipq40xx,lean-mt7621,lean-rockchip,lienol-x64
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set Date
      run: |
         date=$(date +%Y-%m-%d)
         echo "DATE=$date" >> $GITHUB_ENV
                 
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean

    - name: Load Settings.ini
      run: |    
        source "${GITHUB_WORKSPACE}/user/${{matrix.target}}/settings.ini"
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "UPLOAD_PACKAGES_DIR=${UPLOAD_PACKAGES_DIR}" >> $GITHUB_ENV
        echo "UPLOAD_TARGETS_DIR=${UPLOAD_TARGETS_DIR}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV
        echo "UPLOAD_TO_ARTIFACTS=${UPLOAD_TO_ARTIFACTS}" >> $GITHUB_ENV
        echo "UPLOAD_TO_REALEASE=${UPLOAD_TO_REALEASE}" >> $GITHUB_ENV
        echo "UPLOAD_TO_COWTRANSFER=${UPLOAD_TO_COWTRANSFER}" >> $GITHUB_ENV
        echo "WECHAT_NOTIFICATION=${WECHAT_NOTIFICATION}" >> $GITHUB_ENV
        

        
    - name: Clone source code
      run: |
        git clone ${{ env.REPO_URL }} -b ${{ env.REPO_BRANCH }} openwrt
        
    - name: Apply Patches
      run: | 
        echo "Apply patches"
        if [ -n "$(ls -A "user/common/patches" 2>/dev/null)" ]; then
        (
          find "user/common/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d 'openwrt' -p0 --forward"
        )
        fi

        if [ -n "$(ls -A "user/${{matrix.target}}/patches" 2>/dev/null)" ]; then
        (
          find "user/${{matrix.target}}/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d 'openwrt' -p0 --forward"
        )
        fi         

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a
      
    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
         cd openwrt && mv ../user/${{matrix.target}}/config.diff .config && cd ..        
         echo "Apply files..."
         if [ -n "$(ls -A "user/common/files" 2>/dev/null)" ]; then
         cp -r -f user/common/files/* openwrt/package/base-files/files/
         fi
         if [ -n "$(ls -A "user/${{matrix.target}}/files" 2>/dev/null)" ]; then
         cp -r -f user/${{matrix.target}}/files/* openwrt/package/base-files/files/
         fi
        
         echo "Apply custom.sh"
         if [ -f "user/common/custom.sh" ]; then
         (
           cd openwrt
           /bin/bash "../user/common/custom.sh"
         )
         fi       
         if [ -f "user/${{matrix.target}}/custom.sh" ]; then
         (
           cd openwrt
           /bin/bash "../user/${{matrix.target}}/custom.sh"
         )
         fi
         
    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        find ./bin  ! -name '*ac2100*' -name *initramfs*  -exec rm -f {} \;
        echo "::set-output name=status::success"
        
    - name:  Pack packages_dir
      if: steps.compile.outputs.status == 'success'
      run: |
        cd openwrt/bin/packages/
        tar -cvf  ${{matrix.target}}_packages.tar ./
        gzip ${{matrix.target}}_packages.tar
        mv *.tar.gz ..
        
    - name:  Pack targets_dir
      if: steps.compile.outputs.status == 'success'
      run: |
        cd openwrt/bin/targets/
        tar -cvf  ${{matrix.target}}_targets.tar ./
        gzip ${{matrix.target}}_targets.tar
        mv *.tar.gz ..
        
    - name: Assemble Firmware
      run: |
          rm -rf ./Firmware/
          mkdir -p ./Firmware/
          find openwrt/bin/targets/ -name "*bin*" | xargs -i cp {} ./Firmware/
          find openwrt/bin/targets/ -name "*img*" | xargs -i cp -f {} ./Firmware/

    
    - name: Upload Packages to release
      if: env.UPLOAD_PACKAGES_DIR == 'true' && env.UPLOAD_TO_REALEASE == 'true' && !cancelled() &&  steps.compile.outputs.status == 'success'
      uses: svenstaro/upload-release-action@v1-release
      with:
        repo_token: ${{ secrets.SUPER_TOKEN }}
        file: openwrt/bin/${{matrix.target}}_packages.tar.gz
        asset_name: ${{matrix.target}}_packages.tar.gz
        tag: ${{ env.DATE }}
        overwrite: true
        file_glob: true

    - name: Upload Targets to release
      if: env.UPLOAD_TARGETS_DIR == 'true' && env.UPLOAD_TO_REALEASE == 'true' && !cancelled() &&  steps.compile.outputs.status == 'success'
      uses: svenstaro/upload-release-action@v1-release
      with:
        repo_token: ${{ secrets.SUPER_TOKEN }}
        file: openwrt/bin/${{matrix.target}}_targets.tar.gz
        asset_name: ${{matrix.target}}_targets.tar.gz
        tag: ${{ env.DATE }}
        overwrite: true
        file_glob: true

        
    - name: Upload Packages to CowTransfer
      if: env.UPLOAD_PACKAGES_DIR == 'true' && env.UPLOAD_TO_COWTRANSFER == 'true' && !cancelled() &&  steps.compile.outputs.status == 'success'
      run: |
        curl -fsSL git.io/file-transfer | sh
         ./transfer cow --block 2621440 -s -p 64 --no-progress openwrt/bin/${{matrix.target}}_packages.tar.gz
        
    - name: Upload Targetss to CowTransfer
      if: env.UPLOAD_TARGETS_DIR == 'true' && env.UPLOAD_TO_COWTRANSFER == 'true' && !cancelled() &&　 steps.compile.outputs.status == 'success'
      run: |
        curl -fsSL git.io/file-transfer | sh
         ./transfer cow --block 2621440 -s -p 64 --no-progress openwrt/bin/${{matrix.target}}_targets.tar.gz
        

    - name: Upload packages directory
      if: env.UPLOAD_PACKAGES_DIR == 'true' && env.UPLOAD_TO_ARTIFACTS == 'true' && !cancelled()　&& steps.compile.outputs.status == 'success'
      uses: actions/upload-artifact@main
      with:
        name: OpenWrt_packages_${{matrix.target}}
        path: openwrt/bin/packages
        
    - name: Upload targets directory
      if: env.UPLOAD_TARGETS_DIR == 'true' && env.UPLOAD_TO_ARTIFACTS == 'true' && !cancelled() && steps.compile.outputs.status == 'success'
      uses: actions/upload-artifact@main
      with:
        name: OpenWrt_targets_${{matrix.target}}
        path: openwrt/bin/targets
        
    - name: Upload Firmware
      if: env.UPLOAD_FIRMWARE == 'true' && env.UPLOAD_TO_ARTIFACTS == 'true' && !cancelled() && steps.compile.outputs.status == 'success'
      uses: actions/upload-artifact@main
      with:
        name: OpenWrt_firmware_${{matrix.target}}
        path: ./Firmware/
               
    - name: WeChat notification
      if: env.WECHAT_NOTIFICATION == 'true' && !cancelled() && steps.compile.outputs.status == 'success'
      run: curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=${{matrix.target}}编译完成
